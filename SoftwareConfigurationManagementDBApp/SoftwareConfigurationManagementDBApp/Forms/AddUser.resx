<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAKsAAABkCAMAAADOiDBKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAMAUExURf///wCxlAFSibfM2z3DrXXUxLfW4wFKhBZJgvX5+gAhYwAbW1WEqjd6pAADOUV3oQCa
        dEODqwAdYgAkaeLs8jqFq4enwhtlljC9pAAhW53A1G+hvhNdkGbOu9Xk7AAMSZy80QClgwAucK3M3Ci3
        nJa4zgFUiwNDfgCylvL2+azk2WinwhZCfQCrjKq80RI3dgAbUTNpl0uFqwxUihuylWScuyhxngAKQwC2
        mqPC1QCTalWMrwdKg9nl7bXB1AAUSgFdkVbJtYqzyxIpaAA2dpO80gChfYHXyCRajRBajgGtjyt2oVyQ
        swApbQA6ePr9/RWnheP18g0xcoWxyU2Irt3p8AARUQCddwFZjmycu8HV4QAoY/7+/knDrAA8egCGWc7e
        6Q8tbhNUifv+/nScu/39/gJGgE6auCBhk36pxPr7/XSjwBZikytjlAAsbsra5R1Uih26oOju9CNsm5fe
        0ezy9s3j7EltmxSukAAXWQCylerw9Qulg0TGsB5smgA3dwAVVQAwcVSRtA5CfQAZSylsmtby7QBTijZw
        nbfP3gFWjPDy9tvn7g0+esrt5gupiXSpw6rH2Pf6+361y2KUtQAnasDp4azB1AFml+7z9ws5dwARVABP
        h7Pn3gAVUgASQ////gxQhw1YjVmdu+z5983s7QZOhgAPTxtQhhVpmHqmwQCxlf39/UmOsf7//wUycl6I
        rEaHrVHBqgCXcG6UtgFTigywk8Ha5hpZjQgub4a4zgC0mH+iv6LK2gAHPwQ3dVCfvQU6eJLbzQ9HgAA/
        fAY9ecHi6vz7/J7g1f/+/vD1+BRPht/08P7//tLg6RMiXQYqbQCMYAMzawCoh0B/qApPh0t/pwY/fKXF
        14u3zdTo7wC4niVomAAALqbR3+b39AB+TSBynv79/v7+/2iNsMnw7AVRiQANOQCvkgsZUH6ux9Pt5oy8
        0Y6wyMje6Cpnl2eYuAA0dQAzcwUzdPH6+Ac2cAEsaQYnZwUraA4YTBEgWQAiUF6WtxIjYAAZRACxlhEV
        TE0AAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAAQB0lEQVR4Xu2cC1hTV7bHF6BA
        EsCYBAUUw0MeEVTkLQZRK6hAiJU3pCgiFHlpqVExKq8+ePkgNe0F1EbbK9THUUpt0bQ4Cm09Umw7okVr
        26nOTB3vxap1bO/UuTNrnxwgKnhv72jQ+/n7Ps9r7338Z5211157n6PwlCeCHAVu5Prjxxf1Erdt1pat
        ROuIhSMcT2zm6K8/dhS6jdpVIBSWCvbgSYZdiHNiYsQWuxPP6ksfI3KmVMwVyDq2V7lXpY0nF0ZE6Dw9
        902O4EdMXMXRMnUeD9Rj2gUyi6qqw6ampu4xrFZPExOTfZ66KxH89Y63mGqPAfIx5YKYJEbovVoJnrrJ
        LetH3qKZusNMZTkvLalKLxRxT8sjVwe0onWDUe0qpvLwYiW4Ocud1Wl6uMo9q2guuez/5eR9unWsWFR7
        JsRuuB3h1nyeaRIr1PRwkoVQKM0fRwpW2b0fwZ88oNZT17L+O6bJcKGqF8xi/dTUNMlCMNcq5RJbpNW+
        4ril5Uwwq9XEJDgi8RW2bDhQHRHOYoWauicJZb14TVuYQsaCzZ/hht6xpcWz32+DnVuGTyyn3kDqdtmh
        Qs70H48VpFoSrXYhic4vnOCo5yVGGojlD5cbUNmCfqmm2z3euzbtpZ3lVtNFalIo/26H49qQxWs3n1h7
        hZVK3GB9BtPU6HgVDUg13Z63O+ynWFUXhQXkD8Otk2sXR74woNUkuMWuv9CIaAu5Fv2xynRWFq+8kqZh
        v9mH52agD2hHvjtyEjHwK/4hBv3LRBeyQ9/cuFhzB4LVLI1mCgV1y7wXWVb80YkMUTscn/Nfv9ARe9jm
        9S26fpfVRbyvb21MqELNdlapqXsVLz+Dql0ZZj8qhS0mMYt+ZXbi4i2rgJ4dcmVALP91toIRuSPoM6v7
        du6yDKeP2+xzmV51FycT/xAxT76DH9k3KOgSje+xil0xfd66/atlp1sbS+LIVEA9odcqmvjrvHfn/YmR
        PjJk8ZbNq7b0d7BIZ6OPtaEufS5w2CIv7kbJT6EAK/Zmc7nto3pJfJ30rn9LiP/I1yl4e21I4ga7SFaq
        iSd/kpENS7lx+1Mrd1MP7o9y9bKlMjHvXCh9mQlbuPnOkb+Y/77jLe1s/pkBh/VMdNTfwnhcFw6kgYdj
        zsW/J9NoBDOUTBmxKwOOWvyIxOeeHenMCkU8I0YY22HjZAPB1WLpVqkgqVhjhteVPWusMzETcLQ7+R10
        dX22PiKY7zxy4mRWqYnJP5xf0N/BeDQbaDVNSvP4N80iDoQmt/rwmpaT8pMTQ75c67hZAf4tX0c696eG
        JibrjK718gxDrdtfTZI1XRbl32zc6avSV6BpuWPIlxH+m+kR/OB9rE6CZ4SdvobxSBYaaDU93DF/wjLB
        DU19DRZJ9mPfIisDt9bynVuee3aEoVmHw1+dDPoWavU4MFYwS2MJYBZt2Yn+StktnD0JM8OWrzES9Mcr
        gid/JHsLoyEq7R9iCUkeHbNurswws+QKBbtIOeav/C0n6Nn8ryef0bEyGTz5O4xtV1hww9AJTF91t7BM
        mcErrkpi1jKoERE63ZmQiZsnTl5n6K0m+yafuX8kftQs788H9By2+N5Pg3Nvg/WBdcERkQMDlh4dfwPT
        3KhIbmbdZVhTd4ssov6utQxd5MAMRs+6xOFY4Aq4x7Cmh5kZ7X3rLnehSzT6SEDguHQYhoI+Hqj1H1da
        yPzW+EznVd3tBQwP1Boc4mj0IECgaNuigYWMfh6kNZjvzzQdDlp594t9gNbgxPXDttBNyefzku51g6G1
        BvMXvs20Gx6oiqKBpTc9Q2n1DG7xvzUszspCwTZemsGKBjK41n26yBC7LqbNMDK9QOBuaNpBtep0ifx5
        2uF/baCs4MqqBtQOolWni2iZODxx9T5SsrkFr/aNC/dp9fR0bvGf9Ni8iqFrDkkthtJ6JfLd/2BqDReV
        +d0GxC0ft2BIrZHvO86bvcEAu5PGfScTK3YxoEBWun1oH1jnHHEXi2cztzAaDgVV7nfBKh20b63zNESX
        aORJjIPmVVbbvQyi9W48n2odmv83Wkk3fzK0FpP3sZc3PBFaXaKIXR0TnwCtVdxkLKdO8p8IrSkkS73l
        fM/CQD+PjdbDSQW7mKViakOLwWstQx4brUlZvNX6lOrtROfBxRpfq+yeMZahKqmUF87WgD+18D11nuvu
        w+hj7PmG4rn3UnxDKGg3Zysgn/nzEyOc7+dLI+cuPd5j7yPvotUbbLEe7euOdi/cz8J5bPlTnvKUpzwS
        3rA6JGIPfwtyM/37WT2FM53c3MhrUFBsW/GoFrb2z7fvLPeJZc9+A6d+nc4eEQLCPL46nvrzatT6K/Np
        3KPA2v4UQOUP436zLSSyWvaIEJ2Gm1PT7CXQNfAm/CFDp/6O7AJmkO1MfIhqCTnKKASofiMUj+Qc4Ewh
        i8AcCk7PJGWQMbMSoIujESlm9jsPo5WmuQ7kRMEsGstV+IOmkBocOSj/L252L1E+8exR7S/1ixYp1b8n
        7tZaQVmlbvplGsD0zjGb0lNTAOJejl50ZCr6aO8v9Ue8JSCRfph9xD6XbcxohVu8FErx11rF78mv7IyD
        3tT61PcAst9y/eEqKf8XUXu/mc98H1T36yG5onUTtFvjRfsas5eWUHWp18G8pGmFfNRtBXqkr1J+JBtC
        f/1QnuG9VJvj8YWTvNaHtVd0mlotL0yvV4BC4wYFcegQ9sr4/zbLCH3JAUYLjk15OO8Tew+G/eKKjwz9
        FlxTwekYgFMqqMj3doHZ4KrBjHWChgPdrWjvgI+BI8ELy10gR/MB1ihgO9gcQUxx6Y356ECKYjd6xnGA
        2NvQ7oWTM6/j2oAg8ob84TAh+wcv3C2ZX/7FApCkiui8VnS+MU2buOOgZ24mUK6lHLp7I1aJI6+OK+eX
        /xwI6gJ8HJxSJk4BJN9MqVy2k/ipYq6bNj5VCUsDqfZpcb4zygto6wX6Sg+H62EqsHop38ztuAJu5kLq
        HKhLtz93usIaakvx6bm6oF2zL6PWTgqm+eRXJp+l1QVmFEhcKvUBZIYHblJfxA1qBXDppVIrQZof+PKL
        a87TF60fSmhQVDD5M+VTuDoslKJqCuR090VRKgeWpssBDmQzWmm9VqwX1wnJxEVd56JdMRqgVtIcYFsM
        bv4zjPgAaqUDreNTFZCqz82p7JeZ/b+Koj3sVBfAXh+wlqLd8mNoCJXuHgtg/y0FdT9HU7U3iV1LOTB6
        LBonbinV/j1asmkXpS4lWsmGsK2DbO1t8Y4xaNcV0qUbtdBtj1VF0+iKh6MVaG+fuNwf33wNUnwOjWn6
        QoaW8fgmHLq6feb8sZP3IuXmg1rDfSSQjf0FXrwNPWHJH67kpkEOdnCQ+DABFRTW9mT31g91sN9+Lx4V
        f/MRhpP0I717feZTne2k8GGwzLu8KQVtWznVu5djpaJg+ppqfHCHpjbVrI6GJaM/xV53Lgd6l2Fdt20K
        cJvq7aTyvaQ4dxrVkA3BKY5McNVrUkDhS5YQnNZwMAbIR3l7jwFtLlH/0MC7k4/Z9BvacBV9qHdBhnX6
        Ic2HqP+UpwyK3KlapRBhnvT4o10+SlWR4osx7n8Np3rQjoIMOtwoqjEyMFRLhmhIeihQ/b1MgnHlHhTV
        +3EbuleVmxy9RH/pLk51pmP+p4175gI143PMOag5fxsHVGGFkFv+EWjLPmdCJRXtvcsjK4uLP5azNL0M
        L5h5+3WktZ+rY+4BsLWAJ4vGxIZysORy53+CA8XfMavC81pmX7Po5cxWWVbeeA9uN1xMnwDUhXyhYBNO
        PNStz5BxbNznPUBvlfEKkgFUDttWjAocTKvKpYGsoG8MWg2BNkdxlBr3zQG67ph4fBRPHA5RNrGMOaIa
        sqRS6c+otbKkKC1HCw4lHbt33xTv0n91kRskLfOzKVfDa2Je4DsJRde6wm0CmYbhNiS7WZ0glWfX77kR
        c/YLXyor4RrUCBrzooRBXhk5MQ1SNPUBm3BFQNDZsj027ZxKq8qa2uVLBglzSouOkm8Buosu0M0NaETq
        qjhAe6DNlqIcglqhrFG/CNicwK6wUWXCd7iYS7kmoHUlYxN6mKsxGoyt2d4SiZB7DbRHG8/S5g2jmZKe
        hm7chgr90HMKNXuIeywQxFNjg7woEB3jKSk/j5LXMK1sNAdNKfarJkslDJnVKmPyYg4qwLroAoxOIMKu
        irdCloB0w9USbVyf1sZ49ndK/7yCF3BZrxW8gvTzRw8BmWbR9Bwxjv0Au4s4NQn9WtG+F7h+l/ARaqTk
        0gKBUivrIGOLV9scKmu3lMuBO43mtIvQ9X8YMpTcAPM2L1Yrcc6r4vOZQgv2H7s2s1p9BaPHXb+DaUF8
        kTW4+KFdS7oLRebHd14jpZRbQkJeL7prmXgOnl4+IF4t0mulGLvSqBXtKpJJc/BkgUBSVxJFSh0ayyAm
        0PxNWzqg0QHmkJuQy0OiFAZCuw+VW3KB7rNruFqwW1/YrzUuhlsiDsO8L7bNFaJ4Ksz/Onhcl4MkGyd8
        29kQdNCcVCemKRN/wGoldsXfgFqxJ+i1ol05ogRibXBt8IUOD/j+TbWr2IGCjzoTgjZ98oCsVikc31UT
        9NZe3gXobiBxIFYcm8n9M9uC1Ur5FsVOWHItB6iNPHNRgNiNdhVsvBrY8DxTiUClxBVx62LF58nJgF3B
        gdnHC88a2pVjYNeOYqgLsz1fQh4pnTK6hEtmkEOgFGIYiCqqujkBusWu+GuPBuVSHUISjP79FN3ciL8X
        aW7U36LOo0PA08isKdfGO7BfWMDGLGZOfr6tpyboAKm+oEgSn9DMhFmHRuLBIh66zYBdlQphFikk7p6W
        lgPPlyTJ3PQ38Wq7Q0oGRykcC5RSmBZzmtoahLPVjLH4OJrbsOdM8Lm9P6ARJ4hIcwKZ8wE1veid63cC
        8LldI/38+bYDTKnk9l+x737bFq7gCvE3hSdIafMEpkgrEhxXoQIxsaNItkevNZ7KE+N0W/lxkQo6OtSg
        Li12+UBuv0kN1NG2raTd4KiKzuI2oEFwDSRficfbng1akINBV/yOrSboDlg3WOz2a2+HsoY9u/380nsC
        vvkIzbXRplBkg3+7SlAST+yYE2gTE3CgSFgIW8UC26iSneba8BIP0sAVbINudH9fIiBz1njeDaLVo+Ea
        nOYlbLR1afsd5AiFJG0vKem5PLYtLaB5p4b9Un0QqFPpF3Enb0o/zYxWPM0ofBSUKJ/Lqz+K/b9eWpxW
        UKrNnZpVHJPGTbZehLeizv9XeOHfyHj0/F/0T4y++hOPZ7kaoOt8OU/QZA507dSzxTEx9k5AXT/I467E
        kQztumgpar2c/cwEgE9aubyDaEJ1eTtqpS7+3QkTgYM83soLzA0HR5GZyew/ZXqTRNX3+V+1ivib4tKl
        TESLtRBFjprxXtivxhNy8GlfdVBV63NycoAoMpkmpJJcf4X5q/CeWrZptYr8+09F5n7yvRnF/K8A2r6a
        T3nUAPwThMN7T4cRAb0AAAAASUVORK5CYII=
</value>
  </data>
</root>